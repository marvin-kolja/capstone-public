# generated by datamodel-codegen:
#   filename:  core/scripts/xcresult_model_generator/schemas/test_results/tests.json
#   timestamp: 2025-01-28T15:05:39+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Configuration(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    configuration_id: str = Field(..., alias='configurationId')
    configuration_name: str = Field(..., alias='configurationName')


class Device(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    device_id: Optional[str] = Field(None, alias='deviceId')
    device_name: str = Field(..., alias='deviceName')
    architecture: str
    model_name: str = Field(..., alias='modelName')
    platform: Optional[str] = None
    os_version: str = Field(..., alias='osVersion')


class TestResult(Enum):
    passed = 'Passed'
    failed = 'Failed'
    skipped = 'Skipped'
    expected_failure = 'Expected Failure'
    unknown = 'unknown'


class TestNodeType(Enum):
    test_plan = 'Test Plan'
    unit_test_bundle = 'Unit test bundle'
    ui_test_bundle = 'UI test bundle'
    test_suite = 'Test Suite'
    test_case = 'Test Case'
    device = 'Device'
    test_plan_configuration = 'Test Plan Configuration'
    arguments = 'Arguments'
    repetition = 'Repetition'
    test_case_run = 'Test Case Run'
    failure_message = 'Failure Message'
    source_code_reference = 'Source Code Reference'
    attachment = 'Attachment'
    expression = 'Expression'
    test_value = 'Test Value'


class TestNode(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    node_identifier: Optional[str] = Field(None, alias='nodeIdentifier')
    node_type: TestNodeType = Field(..., alias='nodeType')
    name: str
    details: Optional[str] = None
    duration: Optional[str] = None
    result: Optional[TestResult] = None
    tags: Optional[List[str]] = None
    children: Optional[List[TestNode]] = None


class Tests(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    test_plan_configurations: List[Configuration] = Field(
        ..., alias='testPlanConfigurations'
    )
    devices: List[Device]
    test_nodes: List[TestNode] = Field(..., alias='testNodes')


TestNode.model_rebuild()
