"""initial

Revision ID: 18640d25e155
Revises:
Create Date: 2025-01-27 20:18:13.956858

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
import api.custom_db_types


# revision identifiers, used by Alembic.
revision: str = "18640d25e155"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "device",
        sa.Column("device_class", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("device_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("build_version", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "product_version", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("product_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("udid", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("udid"),
    )
    op.create_table(
        "xc_project",
        sa.Column("path", api.custom_db_types.PathType(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "build",
        sa.Column("scheme", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("configuration", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("test_plan", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("xc_test_cases", sa.JSON(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("project_id", sa.Uuid(), nullable=False),
        sa.Column("device_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["device_id"], ["device.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_id"], ["xc_project.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "project_id",
            "device_id",
            "scheme",
            "configuration",
            "test_plan",
            name="unique_build",
        ),
    )
    op.create_table(
        "xc_project_configuration",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("project_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["xc_project.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "xc_project_scheme",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("project_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["xc_project.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "xc_project_target",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("project_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["xc_project.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "session_testplan",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("end_on_failure", sa.Boolean(), nullable=True),
        sa.Column("repetitions", sa.Integer(), nullable=False),
        sa.Column(
            "repetition_strategy",
            sa.Enum("entire_suite", "per_step", name="repetitionstrategy"),
            nullable=False,
        ),
        sa.Column("metrics", sa.JSON(), nullable=True),
        sa.Column(
            "recording_strategy",
            sa.Enum("per_step", "per_test", name="recordingstrategy"),
            nullable=True,
        ),
        sa.Column(
            "recording_start_strategy",
            sa.Enum("launch", "attach", name="recordingstartstrategy"),
            nullable=True,
        ),
        sa.Column("reinstall_app", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("project_id", sa.Uuid(), nullable=False),
        sa.Column("build_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["build_id"], ["build.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_id"], ["xc_project.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "xc_project_test_plan",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("project_id", sa.Uuid(), nullable=False),
        sa.Column("scheme_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["xc_project.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["scheme_id"], ["xc_project_scheme.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "xctestrun",
        sa.Column("path", api.custom_db_types.PathType(), nullable=True),
        sa.Column("test_configurations", sa.JSON(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("build_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["build_id"], ["build.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("build_id"),
        sa.UniqueConstraint("path"),
    )
    op.create_table(
        "session",
        sa.Column(
            "xc_test_configuration_name",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("device_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("plan_id", sa.Uuid(), nullable=True),
        sa.Column("build_id", sa.Uuid(), nullable=True),
        sa.Column("device_snapshot", sa.JSON(), nullable=True),
        sa.Column("plan_snapshot", sa.JSON(), nullable=True),
        sa.Column("build_snapshot", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(["build_id"], ["build.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["device_id"], ["device.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["plan_id"], ["session_testplan.id"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "session_testplan_step",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("repetitions", sa.Integer(), nullable=True),
        sa.Column("test_cases", sa.JSON(), nullable=True),
        sa.Column("metrics", sa.JSON(), nullable=True),
        sa.Column(
            "recording_start_strategy",
            sa.Enum("launch", "attach", name="recordingstartstrategy"),
            nullable=True,
        ),
        sa.Column("reinstall_app", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column("test_plan_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["test_plan_id"], ["session_testplan.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("test_plan_id", "order"),
    )
    op.create_table(
        "execution_step",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("plan_repetition", sa.Integer(), nullable=False),
        sa.Column("plan_step_order", sa.Integer(), nullable=False),
        sa.Column("step_repetition", sa.Integer(), nullable=False),
        sa.Column(
            "recording_start_strategy",
            sa.Enum("launch", "attach", name="recordingstartstrategy"),
            nullable=False,
        ),
        sa.Column("reinstall_app", sa.Boolean(), nullable=False),
        sa.Column("metrics", sa.JSON(), nullable=True),
        sa.Column("test_cases", sa.JSON(), nullable=True),
        sa.Column("end_on_failure", sa.Boolean(), nullable=False),
        sa.Column(
            "test_target_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("xcresult_path", api.custom_db_types.PathType(), nullable=True),
        sa.Column("trace_path", api.custom_db_types.PathType(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("session_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["session_id"], ["session.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "session_id",
            "plan_repetition",
            "plan_step_order",
            "step_repetition",
            name="unique_execution_step",
        ),
    )
    op.create_table(
        "test_result",
        sa.Column("start_time", sa.Float(), nullable=True),
        sa.Column("end_time", sa.Float(), nullable=True),
        sa.Column(
            "result",
            sa.Enum(
                "passed",
                "failed",
                "skipped",
                "expected_failure",
                "unknown",
                name="testresult",
            ),
            nullable=True,
        ),
        sa.Column("total_test_count", sa.Integer(), nullable=False),
        sa.Column("passed_tests", sa.Integer(), nullable=False),
        sa.Column("failed_tests", sa.Integer(), nullable=False),
        sa.Column("skipped_tests", sa.Integer(), nullable=False),
        sa.Column("expected_failures", sa.Integer(), nullable=False),
        sa.Column("test_failures", sa.JSON(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("execution_step_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["execution_step_id"], ["execution_step.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "trace_result",
        sa.Column("export_status", sa.String(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("execution_step_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["execution_step_id"], ["execution_step.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "core_animation",
        sa.Column("timestamp", sa.Integer(), nullable=False),
        sa.Column("fps", sa.Float(), nullable=False),
        sa.Column("gpu_utilization", sa.Float(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("trace_result_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["trace_result_id"], ["trace_result.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "process_stdout_err",
        sa.Column("timestamp", sa.Integer(), nullable=False),
        sa.Column("console_text", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("trace_result_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["trace_result_id"], ["trace_result.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "sysmon",
        sa.Column("timestamp", sa.Integer(), nullable=False),
        sa.Column("cpu", sa.Float(), nullable=True),
        sa.Column("memory", sa.Float(), nullable=True),
        sa.Column("resident_size", sa.Float(), nullable=True),
        sa.Column("recently_died", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("trace_result_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["trace_result_id"], ["trace_result.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("sysmon")
    op.drop_table("process_stdout_err")
    op.drop_table("core_animation")
    op.drop_table("trace_result")
    op.drop_table("test_result")
    op.drop_table("execution_step")
    op.drop_table("session_testplan_step")
    op.drop_table("session")
    op.drop_table("xctestrun")
    op.drop_table("xc_project_test_plan")
    op.drop_table("session_testplan")
    op.drop_table("xc_project_target")
    op.drop_table("xc_project_scheme")
    op.drop_table("xc_project_configuration")
    op.drop_table("build")
    op.drop_table("xc_project")
    op.drop_table("device")
    # ### end Alembic commands ###
